From 31a5f0ee5fcb5ce7eca2fe4fe43926b2a4643729 Mon Sep 17 00:00:00 2001
From: valerii chubar <sdfs@com>
Date: Tue, 21 Aug 2018 12:55:34 +0200
Subject: [PATCH] Kick CR7 in bl2

TODO: check if rcar_dma_init() if redundant

---
 bl2/bl2_main.c | 85 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 85 insertions(+)

diff --git a/bl2/bl2_main.c b/bl2/bl2_main.c
index 802c17464..0cf2d9ded 100644
--- a/bl2/bl2_main.c
+++ b/bl2/bl2_main.c
@@ -18,6 +18,10 @@
 #include <plat/common/platform.h>
 
 #include "bl2_private.h"
+#include <lib/mmio.h>
+
+extern void rcar_dma_init(void);
+extern void rcar_dma_exec(uintptr_t dst, uint32_t src, uint32_t len);
 
 #ifdef __aarch64__
 #define NEXT_IMAGE	"BL31"
@@ -25,6 +29,77 @@
 #define NEXT_IMAGE	"BL32"
 #endif
 
+#define LOC_CR7_CODE_ADDR      0x70000000
+
+#define LOC_CPG_CPGWPR         0xe6150900
+#define LOC_CPG_CPGWPCR        0xe6150904
+
+#define LOC_RST_CR7BAR         0xe6160070
+
+#define LOC_APMU_CR7PSTR       0xe6153040
+
+#define LOC_SYSC_PWRSR7        0xe6180240
+#define LOC_SYSC_PWRONCR7      0xe618024c
+
+
+#define LOC_CR7_WBCTLR         0xf0100000
+#define LOC_CR7_WBPWRCTLR      0xf0100f80
+
+#define LOC_MSSR_BASE          0xe6150000
+#define LOC_MSSR_SRCR2         0xe61500B0
+#define LOC_MSSR_SRSTCLR2      0xe6150948
+
+#define FLASH_BASE             (0x08000000U)
+#define FLASH_RTOS_IMAGE_ADDR  (0x02000000U) // Reserve above for others BL33
+#define FLASH_RTOS_IMAGESIZE   (32*1024*1024) // All remain flash memory size
+#define FLASH_RTOS_MMAP_ADDR   (FLASH_BASE + FLASH_RTOS_IMAGE_ADDR)
+
+static void locCPGReadModWriteRegSet(uint32_t Addr, uint32_t Mask){
+    uint32_t val;
+
+    mmio_write_32(LOC_CPG_CPGWPCR, 0xa5a50000);    /* Clear register protection */
+    val = mmio_read_32(Addr) | Mask;         /* Generate value */
+    mmio_write_32(LOC_CPG_CPGWPR, ~val);          /* Unlock write */
+    mmio_write_32(Addr,val);                 /* Write value */
+}
+
+static void Kick_CR7(void) {
+    uint32_t regval;
+
+    mmio_write_32(LOC_CPG_CPGWPCR, 0xa5a50000);
+
+    mmio_write_32(LOC_CPG_CPGWPR, 0xffbfffff);
+
+    regval = (LOC_CR7_CODE_ADDR & 0xfffc0000);
+    mmio_write_32(LOC_RST_CR7BAR, regval);
+    regval |= 0x10;
+    mmio_write_32(LOC_RST_CR7BAR, regval);
+
+    mmio_write_32(LOC_SYSC_PWRONCR7, 0x1);
+
+    do {
+        regval = (mmio_read_32(LOC_APMU_CR7PSTR) & 0x3);
+        regval |= (mmio_read_32(LOC_SYSC_PWRSR7) & 0x10);
+    } while (regval != 0x10);
+
+    locCPGReadModWriteRegSet(LOC_MSSR_SRCR2, 0x00400000);
+/* FIXME: to be investigated. The commented code should (acc. to HW-Manual) be used
+ * in the core startup, however it creates yet to be investigated problems:
+ * 1. After this code sequence the linux kernel cannot start (data abort exception).
+ * 2. It is also incompatible to R-Car Inspect, there this is commented as well */
+#if 0
+    regval = mmio_read_32(LOC_CR7_WBCTLR);
+    regval |= 0x1;
+    mmio_write_32(LOC_CR7_WBCTLR, regval);
+
+    regval = mmio_read_32(LOC_CR7_WBPWRCTLR);
+    regval |= 0x1;
+    mmio_write_32(LOC_CR7_WBPWRCTLR, regval);
+#endif
+    locCPGReadModWriteRegSet(LOC_MSSR_SRSTCLR2, 0x00400000);
+}
+
+
 #if !BL2_AT_EL3
 /*******************************************************************************
  * Setup function for BL2.
@@ -93,9 +168,18 @@ void bl2_main(void)
 	/* initialize boot source */
 	bl2_plat_preload_setup();
 
+
+
+	/* Load ROS image */
+	rcar_dma_init();
+	rcar_dma_exec(LOC_CR7_CODE_ADDR, FLASH_RTOS_MMAP_ADDR, FLASH_RTOS_IMAGESIZE);
+	// execDMA(LOC_CR7_CODE_ADDR, FLASH_RTOS_MMAP_ADDR, FLASH_RTOS_IMAGESIZE);
+
 	/* Load the subsequent bootloader images. */
 	next_bl_ep_info = bl2_load_images();
 
+	Kick_CR7();
+
 #if !BL2_AT_EL3
 #ifndef __aarch64__
 	/*
@@ -126,6 +210,7 @@ void bl2_main(void)
 	print_entry_point_info(next_bl_ep_info);
 	console_flush();
 
+
 #if ENABLE_PAUTH
 	/*
 	 * Disable pointer authentication before running next boot image
-- 
2.17.1

